// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
  IN
    x[16], y[16], // 16-bit inputs
    zx, // zero the x input?
    nx, // negate the x input?
    zy, // zero the y input?
    ny, // negate the y input?
    f,  // compute out = x + y (if 1) or x & y (if 0)
    no; // negate the out output?

  OUT
    out[16], // 16-bit output
    zr, // 1 if (out == 0), 0 otherwise
    ng; // 1 if (out < 0),  0 otherwise

  PARTS:
    // Put you code here:
    // zero x
    Mux16(a=x, b=false, sel=zx, out=zero16x);
    // negative x
    Not16(in=zero16x, out=notx);
    Mux16(a=zero16x, b=notx, sel=nx, out=not16x);

    // zero y
    Mux16(a=y, b=false, sel=zy, out=zero16y);
    // negative y
    Not16(in=zero16y, out=noty);
    Mux16(a=zero16y, b=noty, sel=ny, out=not16y);

    // f で And16 か Add16 を選ぶ
    And16(a=not16x, b=not16y, out=and16xy);
    Add16(a=not16x, b=not16y, out=add16xy);
    Mux16(a=and16xy, b=add16xy, sel=f, out=xy);

    // negative out
    Not16(in=xy, out=notxy);
    Mux16(a=xy, b=notxy, sel=no, out=out, out[0..7]=oo1, out[8..15]=oo2, out[15]=oo15);

    // ゼロ判定
    Or8Way(in=oo1,  out=oo8way1);
    Or8Way(in=oo2,  out=oo8way2);
    Or(a=oo8way1, b=oo8way2, out=oroo);
    Not(in=oroo, out=zr);

    // 負判定
    And(a=oo15, b=true, out=ng);
}
